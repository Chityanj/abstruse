package webhook

import "time"

type (
	giteaPushHook struct {
		Secret     string `json:"secret"`
		Before     string `json:"before"`
		Repository struct {
			OriginalURL               string      `json:"original_url"`
			HTMLURL                   string      `json:"html_url"`
			AvatarURL                 string      `json:"avatar_url"`
			SSHURL                    string      `json:"ssh_url"`
			AllowMergeCommits         bool        `json:"allow_merge_commits"`
			HasPullRequests           bool        `json:"has_pull_requests"`
			Internal                  bool        `json:"internal"`
			Description               string      `json:"description"`
			Parent                    interface{} `json:"parent"`
			CloneURL                  string      `json:"clone_url"`
			WatchersCount             int         `json:"watchers_count"`
			DefaultBranch             string      `json:"default_branch"`
			CreatedAt                 time.Time   `json:"created_at"`
			HasIssues                 bool        `json:"has_issues"`
			IgnoreWhitespaceConflicts bool        `json:"ignore_whitespace_conflicts"`
			ID                        int         `json:"id"`
			Name                      string      `json:"name"`
			Private                   bool        `json:"private"`
			Fork                      bool        `json:"fork"`
			StarsCount                int         `json:"stars_count"`
			OpenPrCounter             int         `json:"open_pr_counter"`
			AllowSquashMerge          bool        `json:"allow_squash_merge"`
			AllowRebaseExplicit       bool        `json:"allow_rebase_explicit"`
			Template                  bool        `json:"template"`
			Size                      int         `json:"size"`
			Archived                  bool        `json:"archived"`
			UpdatedAt                 time.Time   `json:"updated_at"`
			InternalTracker           struct {
				EnableTimeTracker                bool `json:"enable_time_tracker"`
				AllowOnlyContributorsToTrackTime bool `json:"allow_only_contributors_to_track_time"`
				EnableIssueDependencies          bool `json:"enable_issue_dependencies"`
			} `json:"internal_tracker"`
			HasWiki bool `json:"has_wiki"`
			Owner   struct {
				ID        int       `json:"id"`
				Email     string    `json:"email"`
				AvatarURL string    `json:"avatar_url"`
				IsAdmin   bool      `json:"is_admin"`
				Created   time.Time `json:"created"`
				Login     string    `json:"login"`
				FullName  string    `json:"full_name"`
				Language  string    `json:"language"`
				LastLogin time.Time `json:"last_login"`
				Username  string    `json:"username"`
			} `json:"owner"`
			FullName        string `json:"full_name"`
			ForksCount      int    `json:"forks_count"`
			AllowRebase     bool   `json:"allow_rebase"`
			Empty           bool   `json:"empty"`
			Mirror          bool   `json:"mirror"`
			Website         string `json:"website"`
			OpenIssuesCount int    `json:"open_issues_count"`
			ReleaseCounter  int    `json:"release_counter"`
			Permissions     struct {
				Pull  bool `json:"pull"`
				Admin bool `json:"admin"`
				Push  bool `json:"push"`
			} `json:"permissions"`
		} `json:"repository"`
		Pusher struct {
			Created   time.Time `json:"created"`
			Username  string    `json:"username"`
			Login     string    `json:"login"`
			FullName  string    `json:"full_name"`
			Language  string    `json:"language"`
			IsAdmin   bool      `json:"is_admin"`
			LastLogin time.Time `json:"last_login"`
			ID        int       `json:"id"`
			Email     string    `json:"email"`
			AvatarURL string    `json:"avatar_url"`
		} `json:"pusher"`
		Sender struct {
			Login     string    `json:"login"`
			Email     string    `json:"email"`
			Created   time.Time `json:"created"`
			IsAdmin   bool      `json:"is_admin"`
			LastLogin time.Time `json:"last_login"`
			Username  string    `json:"username"`
			ID        int       `json:"id"`
			FullName  string    `json:"full_name"`
			AvatarURL string    `json:"avatar_url"`
			Language  string    `json:"language"`
		} `json:"sender"`
		Ref        string `json:"ref"`
		After      string `json:"after"`
		CompareURL string `json:"compare_url"`
		Commits    []struct {
			Message      string      `json:"message"`
			URL          string      `json:"url"`
			Verification interface{} `json:"verification"`
			Timestamp    time.Time   `json:"timestamp"`
			Modified     []string    `json:"modified"`
			ID           string      `json:"id"`
			Author       struct {
				Username string `json:"username"`
				Name     string `json:"name"`
				Email    string `json:"email"`
			} `json:"author"`
			Committer struct {
				Name     string `json:"name"`
				Email    string `json:"email"`
				Username string `json:"username"`
			} `json:"committer"`
			Added   []interface{} `json:"added"`
			Removed []interface{} `json:"removed"`
		} `json:"commits"`
		HeadCommit interface{} `json:"head_commit"`
	}

	giteaPullRequestHook struct {
		PullRequest struct {
			ID             int         `json:"id"`
			MergeCommitSha interface{} `json:"merge_commit_sha"`
			Body           string      `json:"body"`
			Assignees      interface{} `json:"assignees"`
			Head           struct {
				RepoID int `json:"repo_id"`
				Repo   struct {
					Parent            interface{} `json:"parent"`
					HTMLURL           string      `json:"html_url"`
					CloneURL          string      `json:"clone_url"`
					UpdatedAt         time.Time   `json:"updated_at"`
					HasIssues         bool        `json:"has_issues"`
					AllowRebase       bool        `json:"allow_rebase"`
					OriginalURL       string      `json:"original_url"`
					HasWiki           bool        `json:"has_wiki"`
					AllowMergeCommits bool        `json:"allow_merge_commits"`
					Template          bool        `json:"template"`
					SSHURL            string      `json:"ssh_url"`
					ReleaseCounter    int         `json:"release_counter"`
					InternalTracker   struct {
						EnableTimeTracker                bool `json:"enable_time_tracker"`
						AllowOnlyContributorsToTrackTime bool `json:"allow_only_contributors_to_track_time"`
						EnableIssueDependencies          bool `json:"enable_issue_dependencies"`
					} `json:"internal_tracker"`
					AllowSquashMerge bool `json:"allow_squash_merge"`
					Owner            struct {
						AvatarURL string    `json:"avatar_url"`
						Language  string    `json:"language"`
						Email     string    `json:"email"`
						Login     string    `json:"login"`
						FullName  string    `json:"full_name"`
						IsAdmin   bool      `json:"is_admin"`
						LastLogin time.Time `json:"last_login"`
						Created   time.Time `json:"created"`
						Username  string    `json:"username"`
						ID        int       `json:"id"`
					} `json:"owner"`
					Fork          bool      `json:"fork"`
					OpenPrCounter int       `json:"open_pr_counter"`
					CreatedAt     time.Time `json:"created_at"`
					Permissions   struct {
						Admin bool `json:"admin"`
						Push  bool `json:"push"`
						Pull  bool `json:"pull"`
					} `json:"permissions"`
					IgnoreWhitespaceConflicts bool   `json:"ignore_whitespace_conflicts"`
					AvatarURL                 string `json:"avatar_url"`
					Size                      int    `json:"size"`
					Website                   string `json:"website"`
					OpenIssuesCount           int    `json:"open_issues_count"`
					DefaultBranch             string `json:"default_branch"`
					HasPullRequests           bool   `json:"has_pull_requests"`
					AllowRebaseExplicit       bool   `json:"allow_rebase_explicit"`
					FullName                  string `json:"full_name"`
					Description               string `json:"description"`
					Private                   bool   `json:"private"`
					ForksCount                int    `json:"forks_count"`
					WatchersCount             int    `json:"watchers_count"`
					Internal                  bool   `json:"internal"`
					ID                        int    `json:"id"`
					Name                      string `json:"name"`
					Empty                     bool   `json:"empty"`
					Mirror                    bool   `json:"mirror"`
					StarsCount                int    `json:"stars_count"`
					Archived                  bool   `json:"archived"`
				} `json:"repo"`
				Label string `json:"label"`
				Ref   string `json:"ref"`
				Sha   string `json:"sha"`
			} `json:"head"`
			Comments  int  `json:"comments"`
			Mergeable bool `json:"mergeable"`
			Base      struct {
				Label  string `json:"label"`
				Ref    string `json:"ref"`
				Sha    string `json:"sha"`
				RepoID int    `json:"repo_id"`
				Repo   struct {
					IgnoreWhitespaceConflicts bool   `json:"ignore_whitespace_conflicts"`
					AllowRebaseExplicit       bool   `json:"allow_rebase_explicit"`
					ID                        int    `json:"id"`
					Template                  bool   `json:"template"`
					Website                   string `json:"website"`
					Archived                  bool   `json:"archived"`
					HasIssues                 bool   `json:"has_issues"`
					Description               string `json:"description"`
					SSHURL                    string `json:"ssh_url"`
					OpenIssuesCount           int    `json:"open_issues_count"`
					ReleaseCounter            int    `json:"release_counter"`
					InternalTracker           struct {
						EnableTimeTracker                bool `json:"enable_time_tracker"`
						AllowOnlyContributorsToTrackTime bool `json:"allow_only_contributors_to_track_time"`
						EnableIssueDependencies          bool `json:"enable_issue_dependencies"`
					} `json:"internal_tracker"`
					HasPullRequests bool `json:"has_pull_requests"`
					Owner           struct {
						Language  string    `json:"language"`
						ID        int       `json:"id"`
						Email     string    `json:"email"`
						AvatarURL string    `json:"avatar_url"`
						LastLogin time.Time `json:"last_login"`
						Created   time.Time `json:"created"`
						Username  string    `json:"username"`
						Login     string    `json:"login"`
						FullName  string    `json:"full_name"`
						IsAdmin   bool      `json:"is_admin"`
					} `json:"owner"`
					Empty         bool        `json:"empty"`
					Parent        interface{} `json:"parent"`
					CloneURL      string      `json:"clone_url"`
					WatchersCount int         `json:"watchers_count"`
					AvatarURL     string      `json:"avatar_url"`
					Size          int         `json:"size"`
					StarsCount    int         `json:"stars_count"`
					Permissions   struct {
						Pull  bool `json:"pull"`
						Admin bool `json:"admin"`
						Push  bool `json:"push"`
					} `json:"permissions"`
					Private           bool      `json:"private"`
					Mirror            bool      `json:"mirror"`
					DefaultBranch     string    `json:"default_branch"`
					AllowMergeCommits bool      `json:"allow_merge_commits"`
					AllowRebase       bool      `json:"allow_rebase"`
					OriginalURL       string    `json:"original_url"`
					CreatedAt         time.Time `json:"created_at"`
					UpdatedAt         time.Time `json:"updated_at"`
					Fork              bool      `json:"fork"`
					HTMLURL           string    `json:"html_url"`
					ForksCount        int       `json:"forks_count"`
					OpenPrCounter     int       `json:"open_pr_counter"`
					Name              string    `json:"name"`
					FullName          string    `json:"full_name"`
					HasWiki           bool      `json:"has_wiki"`
					AllowSquashMerge  bool      `json:"allow_squash_merge"`
					Internal          bool      `json:"internal"`
				} `json:"repo"`
			} `json:"base"`
			Assignee interface{} `json:"assignee"`
			Merged   bool        `json:"merged"`
			PatchURL string      `json:"patch_url"`
			URL      string      `json:"url"`
			User     struct {
				Language  string    `json:"language"`
				IsAdmin   bool      `json:"is_admin"`
				Created   time.Time `json:"created"`
				Username  string    `json:"username"`
				Login     string    `json:"login"`
				FullName  string    `json:"full_name"`
				Email     string    `json:"email"`
				ID        int       `json:"id"`
				AvatarURL string    `json:"avatar_url"`
				LastLogin time.Time `json:"last_login"`
			} `json:"user"`
			DiffURL   string        `json:"diff_url"`
			MergedBy  interface{}   `json:"merged_by"`
			ClosedAt  interface{}   `json:"closed_at"`
			MergedAt  interface{}   `json:"merged_at"`
			MergeBase string        `json:"merge_base"`
			DueDate   interface{}   `json:"due_date"`
			Labels    []interface{} `json:"labels"`
			Milestone interface{}   `json:"milestone"`
			IsLocked  bool          `json:"is_locked"`
			HTMLURL   string        `json:"html_url"`
			CreatedAt time.Time     `json:"created_at"`
			UpdatedAt time.Time     `json:"updated_at"`
			Number    int           `json:"number"`
			Title     string        `json:"title"`
			State     string        `json:"state"`
		} `json:"pull_request"`
		Repository struct {
			Template        bool `json:"template"`
			StarsCount      int  `json:"stars_count"`
			WatchersCount   int  `json:"watchers_count"`
			OpenPrCounter   int  `json:"open_pr_counter"`
			InternalTracker struct {
				EnableTimeTracker                bool `json:"enable_time_tracker"`
				AllowOnlyContributorsToTrackTime bool `json:"allow_only_contributors_to_track_time"`
				EnableIssueDependencies          bool `json:"enable_issue_dependencies"`
			} `json:"internal_tracker"`
			AllowRebaseExplicit bool      `json:"allow_rebase_explicit"`
			OriginalURL         string    `json:"original_url"`
			OpenIssuesCount     int       `json:"open_issues_count"`
			HasPullRequests     bool      `json:"has_pull_requests"`
			Size                int       `json:"size"`
			Website             string    `json:"website"`
			UpdatedAt           time.Time `json:"updated_at"`
			Permissions         struct {
				Admin bool `json:"admin"`
				Push  bool `json:"push"`
				Pull  bool `json:"pull"`
			} `json:"permissions"`
			AllowRebase bool   `json:"allow_rebase"`
			AvatarURL   string `json:"avatar_url"`
			Owner       struct {
				FullName  string    `json:"full_name"`
				Language  string    `json:"language"`
				Email     string    `json:"email"`
				AvatarURL string    `json:"avatar_url"`
				IsAdmin   bool      `json:"is_admin"`
				LastLogin time.Time `json:"last_login"`
				Created   time.Time `json:"created"`
				Username  string    `json:"username"`
				ID        int       `json:"id"`
				Login     string    `json:"login"`
			} `json:"owner"`
			ReleaseCounter            int         `json:"release_counter"`
			Name                      string      `json:"name"`
			CloneURL                  string      `json:"clone_url"`
			CreatedAt                 time.Time   `json:"created_at"`
			Internal                  bool        `json:"internal"`
			HasWiki                   bool        `json:"has_wiki"`
			ID                        int         `json:"id"`
			FullName                  string      `json:"full_name"`
			Description               string      `json:"description"`
			Mirror                    bool        `json:"mirror"`
			HTMLURL                   string      `json:"html_url"`
			SSHURL                    string      `json:"ssh_url"`
			ForksCount                int         `json:"forks_count"`
			Private                   bool        `json:"private"`
			Archived                  bool        `json:"archived"`
			HasIssues                 bool        `json:"has_issues"`
			IgnoreWhitespaceConflicts bool        `json:"ignore_whitespace_conflicts"`
			Empty                     bool        `json:"empty"`
			Fork                      bool        `json:"fork"`
			Parent                    interface{} `json:"parent"`
			DefaultBranch             string      `json:"default_branch"`
			AllowMergeCommits         bool        `json:"allow_merge_commits"`
			AllowSquashMerge          bool        `json:"allow_squash_merge"`
		} `json:"repository"`
		Sender struct {
			Username  string    `json:"username"`
			FullName  string    `json:"full_name"`
			Email     string    `json:"email"`
			IsAdmin   bool      `json:"is_admin"`
			LastLogin time.Time `json:"last_login"`
			Created   time.Time `json:"created"`
			ID        int       `json:"id"`
			Login     string    `json:"login"`
			AvatarURL string    `json:"avatar_url"`
			Language  string    `json:"language"`
		} `json:"sender"`
		Review interface{} `json:"review"`
		Secret string      `json:"secret"`
		Action string      `json:"action"`
		Number int         `json:"number"`
	}

	giteaCreateHook struct {
		Ref        string `json:"ref"`
		RefType    string `json:"ref_type"`
		Repository struct {
			AllowMergeCommits         bool      `json:"allow_merge_commits"`
			AllowRebase               bool      `json:"allow_rebase"`
			AllowRebaseExplicit       bool      `json:"allow_rebase_explicit"`
			AllowSquashMerge          bool      `json:"allow_squash_merge"`
			Archived                  bool      `json:"archived"`
			AvatarURL                 string    `json:"avatar_url"`
			CloneURL                  string    `json:"clone_url"`
			CreatedAt                 time.Time `json:"created_at"`
			DefaultBranch             string    `json:"default_branch"`
			Description               string    `json:"description"`
			Empty                     bool      `json:"empty"`
			Fork                      bool      `json:"fork"`
			ForksCount                int       `json:"forks_count"`
			FullName                  string    `json:"full_name"`
			HasIssues                 bool      `json:"has_issues"`
			HasPullRequests           bool      `json:"has_pull_requests"`
			HasWiki                   bool      `json:"has_wiki"`
			HTMLURL                   string    `json:"html_url"`
			ID                        int       `json:"id"`
			IgnoreWhitespaceConflicts bool      `json:"ignore_whitespace_conflicts"`
			Internal                  bool      `json:"internal"`
			InternalTracker           struct {
				AllowOnlyContributorsToTrackTime bool `json:"allow_only_contributors_to_track_time"`
				EnableIssueDependencies          bool `json:"enable_issue_dependencies"`
				EnableTimeTracker                bool `json:"enable_time_tracker"`
			} `json:"internal_tracker"`
			Mirror          bool   `json:"mirror"`
			Name            string `json:"name"`
			OpenIssuesCount int    `json:"open_issues_count"`
			OpenPrCounter   int    `json:"open_pr_counter"`
			OriginalURL     string `json:"original_url"`
			Owner           struct {
				AvatarURL string    `json:"avatar_url"`
				Created   time.Time `json:"created"`
				Email     string    `json:"email"`
				FullName  string    `json:"full_name"`
				ID        int       `json:"id"`
				IsAdmin   bool      `json:"is_admin"`
				Language  string    `json:"language"`
				LastLogin time.Time `json:"last_login"`
				Login     string    `json:"login"`
				Username  string    `json:"username"`
			} `json:"owner"`
			Parent      interface{} `json:"parent"`
			Permissions struct {
				Admin bool `json:"admin"`
				Pull  bool `json:"pull"`
				Push  bool `json:"push"`
			} `json:"permissions"`
			Private        bool      `json:"private"`
			ReleaseCounter int       `json:"release_counter"`
			Size           int       `json:"size"`
			SSHURL         string    `json:"ssh_url"`
			StarsCount     int       `json:"stars_count"`
			Template       bool      `json:"template"`
			UpdatedAt      time.Time `json:"updated_at"`
			WatchersCount  int       `json:"watchers_count"`
			Website        string    `json:"website"`
		} `json:"repository"`
		Secret string `json:"secret"`
		Sender struct {
			AvatarURL string    `json:"avatar_url"`
			Created   time.Time `json:"created"`
			Email     string    `json:"email"`
			FullName  string    `json:"full_name"`
			ID        int       `json:"id"`
			IsAdmin   bool      `json:"is_admin"`
			Language  string    `json:"language"`
			LastLogin time.Time `json:"last_login"`
			Login     string    `json:"login"`
			Username  string    `json:"username"`
		} `json:"sender"`
		Sha string `json:"sha"`
	}
)
