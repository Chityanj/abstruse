// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/jkuri/abstruse/internal/pkg/auth"
	"github.com/jkuri/abstruse/internal/pkg/log"
	"github.com/jkuri/abstruse/internal/server"
	"github.com/jkuri/abstruse/internal/server/app"
	"github.com/jkuri/abstruse/internal/server/controller"
	"github.com/jkuri/abstruse/internal/server/db"
	"github.com/jkuri/abstruse/internal/server/db/repository"
	"github.com/jkuri/abstruse/internal/server/etcd"
	"github.com/jkuri/abstruse/internal/server/http"
	"github.com/jkuri/abstruse/internal/server/options"
	"github.com/jkuri/abstruse/internal/server/service"
	"github.com/jkuri/abstruse/internal/server/websocket"
)

// Injectors from wire.go:

func CreateApp(cfg string) (*server.App, error) {
	viper, err := options.NewConfig(cfg)
	if err != nil {
		return nil, err
	}
	optionsOptions, err := options.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logOptions, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(logOptions)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.NewDatabase(optionsOptions)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewDBUserRepository(logger, gormDB)
	userService := service.NewUserService(logger, userRepository)
	userController := controller.NewUserController(logger, userService)
	versionService := service.NewVersionService(logger)
	versionController := controller.NewVersionController(logger, versionService)
	websocketApp := websocket.NewApp(logger)
	repoRepository := repository.NewDBRepoRepository(gormDB)
	jobRepository := repository.NewDBJobRepository(gormDB)
	buildRepository := repository.NewDBBuildRepository(gormDB)
	appApp, err := app.NewApp(optionsOptions, websocketApp, repoRepository, jobRepository, buildRepository, logger)
	if err != nil {
		return nil, err
	}
	workerService := service.NewWorkerService(logger, appApp)
	workerController := controller.NewWorkerController(logger, workerService)
	buildService := service.NewBuildService(buildRepository, jobRepository, appApp)
	buildController := controller.NewBuildController(buildService)
	repositoryService := service.NewRepositoryService(repoRepository)
	repositoryController := controller.NewRepositoryController(repositoryService)
	providerRepository := repository.NewDBProviderRepository(gormDB)
	providerService := service.NewProviderService(providerRepository)
	providerController := controller.NewProviderController(providerService, repositoryService)
	middlewareController := controller.NewMiddlewareController(logger, userService)
	initControllers := controller.CreateInitControllersFn(userController, versionController, workerController, buildController, repositoryController, providerController, middlewareController)
	router := http.NewRouter(optionsOptions, initControllers)
	httpServer, err := http.NewServer(optionsOptions, logger, router)
	if err != nil {
		return nil, err
	}
	etcdServer := etcd.NewServer(optionsOptions, logger)
	websocketServer := websocket.NewServer(optionsOptions, websocketApp, logger)
	serverApp := server.NewApp(optionsOptions, logger, httpServer, etcdServer, websocketServer, appApp)
	return serverApp, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, options.ProviderSet, http.ProviderSet, etcd.ProviderSet, app.ProviderSet, db.ProviderSet, repository.ProviderSet, auth.ProviderSet, controller.ProviderSet, service.ProviderSet, websocket.ProviderSet, server.ProviderSet)
